/*
 *
 */

import "robobeerun-templates/affinities.stg"
import "robobeerun-templates/tolerations.stg"
import "robobeerun-templates/resources.stg"
import "robobeerun-templates/tcp_probe.stg"
import "robobeerun-templates/cert_config.stg"
import "robobeerun-templates/ingress_config.stg"

ea-kibana-yaml(parent, vars) ::= <<
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana-<vars.kibana.revision>
  namespace: robobeerun-com-elastic
  labels:
    app: kibana
data:
  kibana.yml: |-
    ---
    # Default Kibana configuration from kibana-docker.
    server.name: kibana
    server.host: "0"

    # Replace with Elasticsearch DNS name picked during Service deployment
    elasticsearch.url: ${ELASTICSEARCH_URL}
    elasticsearch.requestTimeout: 360000

    # Kibana TLS Config
    server.ssl.enabled: false
    #server.ssl.key: /usr/share/kibana/config/kibana-key.pem
    #server.ssl.certificate: /usr/share/kibana/config/kibana-crt.pem
    #server.ssl.keyPassphrase: ${KEY_PASSPHRASE}
    
    elasticsearch.ssl.certificate: /usr/share/kibana/config/kibana-crt.pem
    elasticsearch.ssl.key: /usr/share/kibana/config/kibana-key.pem
    elasticsearch.ssl.keyPassphrase: ${KEY_PASSPHRASE}
    elasticsearch.ssl.certificateAuthorities: /usr/share/kibana/config/kibana-root-ca.pem
    elasticsearch.ssl.verificationMode: certificate

    opendistro_security.allow_client_certificates: true
    
    opendistro_security.cookie.secure: false
    opendistro_security.cookie.password: ${COOKIE_PASS}
    
    opendistro_security.auth.type: "openid"
    opendistro_security.openid.connect_url: "<vars.kibana.openid.url>"
    opendistro_security.openid.client_id: "<vars.kibana.openid.id>"
    opendistro_security.openid.client_secret: "<vars.kibana.openid.secret>"
    opendistro_security.openid.base_redirect_url: "https://kibana.andrea.muellerpublic.de"

---

apiVersion: v1
kind: Secret
metadata:
  name: kibana-tls-data-<vars.kibana.revision>
  namespace: robobeerun-com-elastic
type: Opaque
data:
  kibana-crt.pem: <vars.elastic.cert.kibanaCrt;format="base64">

  kibana-key.pem: <vars.elastic.cert.kibanaKey;format="base64">

  kibana-root-ca.pem: <vars.elastic.cert.kibanaRoot;format="base64">

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: robobeerun-com-elastic
  labels:
    component: kibana
    app: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
     component: kibana
     app: kibana
  template:
    metadata:
      labels:
        component: kibana
        app: kibana
    spec:
      containers:
      - name: kibana
        image: <vars.kibana.image.name>:<vars.kibana.image.version>
        env:
        - name: CLUSTER_NAME
          value: logs
        - name: ELASTICSEARCH_USERNAME
          value: kibanaserver
        - name: ELASTICSEARCH_URL
          value: "https://elasticsearch.robobeerun-com-elastic.svc"
        - name: ELASTICSEARCH_PASSWORD
          value: <vars.elastic.users.kibanaserver.password>
        - name: KEY_PASSPHRASE
          value: <vars.elastic.cert.kibanaPass>
        - name: COOKIE_PASS
          value: <vars.kibana.cookiePass>
        <resourcesGroup(vars.kibana)>
        <tcpProbesPortGroup(vars.kibana, "http")>
        ports:
        - containerPort: 5601
          name: http
        volumeMounts:
        - mountPath: /usr/share/kibana/config/kibana.yml
          name: config
          subPath: kibana.yml
        - mountPath: /usr/share/kibana/config/kibana-crt.pem
          name: certs
          subPath: kibana-crt.pem
        - mountPath: /usr/share/kibana/config/kibana-key.pem
          name: certs
          subPath: kibana-key.pem
        - mountPath: /usr/share/kibana/config/kibana-root-ca.pem
          name: certs
          subPath: kibana-root-ca.pem
      volumes:
      - name: config
        configMap:
          name: kibana-<vars.kibana.revision>
      - name: certs
        secret:
          secretName: kibana-tls-data-<vars.kibana.revision>
      <affinitiesGroup(vars.kibana.affinity)>
      <tolerationMasterGroup(vars.kibana.allowOnMaster)>
      <tolerationsGroup(vars.kibana.tolerations, vars.kibana.allowOnMaster)>

---

apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: robobeerun-com-elastic
  labels:
    app: kibana
spec:
  ports:
  - name: "http"
    port: 8080
    targetPort: "http"
  selector:
    app: kibana

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: kibana
  namespace: robobeerun-com-elastic
  annotations:
    <ingressDefaultAnnotations(vars.kibana.nginx)>
spec:
  <ingressDefaultSpec("kibana-ingress", vars.kibana.hosts)>

---

<ingressService("kibana-ingress", "kibana", "robobeerun-com-elastic", vars.nginx)>

---

apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: kibana-ingress
  namespace: robobeerun-com-elastic
spec:
  <certDefaultSpec("kibana-ingress-tls", vars.kibana.hosts, vars.kibana.issuer)>

---

>>
