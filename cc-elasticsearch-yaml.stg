/*
 *
 */

cc-elasticsearch-yaml(parent, vars) ::= <<

---

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: elasticsearch
  name: elasticsearch
  namespace: robobeerun-com-elastic

---

apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-discovery
  namespace: robobeerun-com-elastic
  labels:
    component: elasticsearch
    role: master
spec:
  selector:
    component: elasticsearch
    role: master
  ports:
  - name: transport
    port: 9300
    protocol: TCP

---

apiVersion: v1
kind: Service
metadata:
  labels:
    component: elasticsearch
    role: client
  name: elasticsearch
  namespace: robobeerun-com-elastic
spec:
  ports:
    - name: http
      port: 9200
    - name: transport
      port: 9300
    - name: metrics
      port: 9600
  selector:
    component: elasticsearch
    role: client

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-<vars.elastic.revision>
  namespace: robobeerun-com-elastic
  labels:
    app: elasticsearch
data:
  elasticsearch.yml: |-
    cluster:
      name: ${CLUSTER_NAME}
    node:
      master: ${NODE_MASTER}
      data: ${NODE_DATA}
      name: ${NODE_NAME}
      ingest: ${NODE_INGEST}
      max_local_storage_nodes: 1
      attr.box_type: hot

    processors: ${PROCESSORS:1}

    network.host: ${NETWORK_HOST}

    path:
      data: /usr/share/elasticsearch/data
      logs: /usr/share/elasticsearch/logs

    http:
      compression: true

    discovery:
      zen:
        ping.unicast.hosts: ${DISCOVERY_SERVICE}
        minimum_master_nodes: ${NUMBER_OF_MASTERS}

    # TLS Configuration Transport Layer
    opendistro_security.ssl.transport.pemcert_filepath: elk-crt.pem
    opendistro_security.ssl.transport.pemkey_filepath: elk-key.pem
    opendistro_security.ssl.transport.pemtrustedcas_filepath: elk-root-ca.pem
    opendistro_security.ssl.transport.pemkey_password: ${TRANSPORT_TLS_PEM_PASS}
    opendistro_security.ssl.transport.enforce_hostname_verification: false

    # TLS Configuration REST Layer
    opendistro_security.ssl.http.enabled: true
    opendistro_security.ssl.http.pemcert_filepath: elk-crt.pem
    opendistro_security.ssl.http.pemkey_filepath: elk-key.pem
    opendistro_security.ssl.http.pemtrustedcas_filepath: elk-root-ca.pem
    opendistro_security.ssl.http.pemkey_password: ${HTTP_TLS_PEM_PASS}

    # Demo Certificate Option Disabled
    opendistro_security.allow_unsafe_democertificates: false

    opendistro_security.allow_default_init_securityindex: false

    opendistro_security.authcz.admin_dn:
      - 'CN=admin,OU=es.muellerpublic.de,O=muellerpublic.de,L=MUNICH,ST=BAVARIA,C=DE'
    opendistro_security.nodes_dn:
      - 'CN=*.es.muellerpublic.de,OU=es.muellerpublic.de,O=muellerpublic.de,ST=BAVARIA,C=DE'

    opendistro_security.audit.type: internal_elasticsearch
    opendistro_security.enable_snapshot_restore_privilege: true
    opendistro_security.check_snapshot_restore_write_privileges: true
    opendistro_security.restapi.roles_enabled: ["all_access", "security_rest_api_access"]
    cluster.routing.allocation.disk.threshold_enabled: false
    opendistro_security.audit.config.disabled_rest_categories: NONE
    opendistro_security.audit.config.disabled_transport_categories: NONE

  logging.yml: |-
    # you can override this using by setting a system property, for example -Des.logger.level=DEBUG
    es.logger.level: INFO
    rootLogger: ${es.logger.level}, console
    logger:
      # log action execution errors for easier debugging
      action: DEBUG
      # reduce the logging for aws, too much is logged under the default INFO
      com.amazonaws: WARN
    appender:
      console:
        type: console
        layout:
          type: consolePattern
          conversionPattern: "[%d{ISO8601}][%-5p][%-25c] %m%n"

---

apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-tls-data-<vars.elastic.revision>
  namespace: robobeerun-com-elastic
type: Opaque
data:
  elk-crt.pem: <vars.elastic.cert.elkCrt;format="base64">

  elk-key.pem: <vars.elastic.cert.elkKey;format="base64">

  elk-root-ca.pem: <vars.elastic.cert.elkRoot;format="base64">

  admin-crt.pem: <vars.elastic.cert.adminCrt;format="base64">

  admin-key.pem: <vars.elastic.cert.adminKey;format="base64">

  admin-root-ca.pem: <vars.elastic.cert.adminRoot;format="base64">

---

apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-users-<vars.elastic.revision>
  namespace: robobeerun-com-elastic
type: Opaque
stringData:
  internal_users.yml: |
    admin:
      readonly: true
      hash: <vars.elastic.users.admin.hash>
      roles:
        - admin
      attributes:
        attribute1: value1
        attribute2: value2
        attribute3: value3
    logstash:
      hash: <vars.elastic.users.logstash.hash>
      roles:
        - logstash
    kibanaserver:
      readonly: true
      hash: <vars.elastic.users.kibanaserver.hash>
    kibanaro:
      hash: <vars.elastic.users.kibanaro.hash>
      roles:
        - kibanauser
        - readall
    readall:
      hash: <vars.elastic.users.readall.hash>
      roles:
        - readall
    snapshotrestore:
      hash: <vars.elastic.users.snapshotrestore.hash>
      roles:
        - snapshotrestore

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-security-<vars.elastic.revision>
  namespace: robobeerun-com-elastic
data:
  config.yml: |
    opendistro_security:
      dynamic:
        http:
          anonymous_auth_enabled: false
          xff:
            enabled: false
            internalProxies: '192\.168\.0\.10|192\.168\.0\.11' # regex pattern
            #internalProxies: '.*' # trust all internal proxies, regex pattern
            remoteIpHeader:  'x-forwarded-for'
            proxiesHeader:   'x-forwarded-by'
            #trustedProxies: '.*' # trust all external proxies, regex pattern
        authc:
          basic_internal_auth_domain: 
            http_enabled: true
            transport_enabled: true
            order: 4
            http_authenticator:
              type: basic
              challenge: false
            authentication_backend:
              type: intern
          openid_auth_domain:
            http_enabled: true
            transport_enabled: true
            order: 5
            http_authenticator:
              type: openid
              challenge: false
              config:
                subject_key: preferred_username
                roles_key: roles
                openid_connect_url: <vars.elastic.openidConnectUrl>
            authentication_backend:
              type: noop
        authz:    
          roles_from_myldap:
            http_enabled: false
            transport_enabled: false
            authorization_backend:
              # LDAP authorization backend (gather roles from a LDAP or Active Directory, you have to configure the above LDAP authentication backend settings too)
              type: ldap 
              config:
                # enable ldaps
                enable_ssl: false
                # enable start tls, enable_ssl should be false
                enable_start_tls: false
                # send client certificate
                enable_ssl_client_auth: false
                # verify ldap hostname
                verify_hostnames: true
                hosts:
                  - localhost:8389
                bind_dn: null
                password: null
                rolebase: 'ou=groups,dc=example,dc=com'
                # Filter to search for roles (currently in the whole subtree beneath rolebase)
                # {0} is substituted with the DN of the user
                # {1} is substituted with the username 
                # {2} is substituted with an attribute value from user's directory entry, of the authenticated user. Use userroleattribute to specify the name of the attribute            
                rolesearch: '(member={0})'
                # Specify the name of the attribute which value should be substituted with {2} above
                userroleattribute: null
                # Roles as an attribute of the user entry
                userrolename: disabled
                #userrolename: memberOf
                # The attribute in a role entry containing the name of that role, Default is "name".
                # Can also be "dn" to use the full DN as rolename.
                rolename: cn
                # Resolve nested roles transitive (roles which are members of other roles and so on ...)
                resolve_nested_roles: true
                userbase: 'ou=people,dc=example,dc=com'
                # Filter to search for users (currently in the whole subtree beneath userbase)
                # {0} is substituted with the username 
                usersearch: '(uid={0})'
                # Skip users matching a user name, a wildcard or a regex pattern
                #skip_users: 
                #  - 'cn=Michael Jackson,ou*people,o=TEST'
                #  - '/\S*/'    
          roles_from_another_ldap:
            enabled: false
            authorization_backend:
              type: ldap 
              #config goes here ...
---

>>
